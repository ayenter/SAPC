var lexicon = require('./lexicon')

/**
 * Entry point
 *
 * @param {string}
 * @param {object}
 * @return {object}
 */

function Mollusk(phrase, options) {
  if (!(this instanceof Mollusk))
    return new Mollusk(phrase, options)

  this.valence = 0
  this.valence_abs = 0
  this.positive = new Set()
  this.negative = new Set()

  options = Object.assign({negate: true}, options)

  phrase = this.getPhrasesValence(phrase, options)

  this.getWords(phrase).forEach((word, i, a) =>
    this.getWordValence(word, a[i - 1], options))

  return this
}

/**
 * Update valence and matches
 *
 * @param {string}
 * @param {string|number}
 */

Mollusk.prototype.updateValence = function(m, v) {
  v = Number(v)
  this.valence += v
  this.valence_abs += Math.abs(v)
  ;(v < 0 ? this.negative : this.positive).add(m)
  return ''
}

/**
 * Remove punctuation, extra spaces. Split into words
 *
 * @param {string}
 * @return {string}
 */

Mollusk.prototype.getWords = function(phrase) {
  return phrase
  .replace(/[^a-z0-9\- ]+/gi, '')
  .replace(/ {2,}/g, ' ')
  .trim()
  .toLowerCase()
  .split(' ')
}

/**
 * Get word valence
 *
 * @param {string}
 * @param {string}
 * @param {object}
 */

Mollusk.prototype.getWordValence = function(word, previousWord, options) {
  var valence = lexicon.words.get(word)

  if (valence === undefined) return

  if (options.negate && lexicon.negate.test(previousWord)) {
    word = previousWord + ' ' + word
    valence = valence * -0.5
  }

  this.updateValence(word, valence)
}

/**
 * Extract subphrases and their valences
 *
 * @param {string}
 * @param {object}
 * @return {String}
 */

Mollusk.prototype.getPhrasesValence = function(phrase, options) {
  phrase = phrase.replace(lexicon.neutral.phrases, '')

  if (!lexicon.phrases_all.test(phrase))
    return phrase

  for (var val in lexicon.phrases) {
    var re = lexicon.phrases[val]
    re.lastIndex = 0
    phrase = phrase.replace(re, (m) => this.updateValence(m, val))
  }

  return phrase
}

module.exports = Mollusk

Mollusk.lexicon = lexicon
Mollusk.val = (p, o) => Mollusk(p, o).valence
Mollusk.abs = (p, o) => Mollusk(p, o).valence_abs
Mollusk.isNegative = (p, o) => Mollusk.val(p, o) < 0
Mollusk.isPositive = (p, o) => Mollusk.val(p, o) > 0
