// AFINN database is copyright protected and distributed under
// Open Database License (ODbL) v1.0
// http://www.opendatacommons.org/licenses/odbl/1.0/
//
// SentiWordNet is distributed under the Attribution-ShareAlike 3.0 Unported
// (CC BY-SA 3.0) license.
// /http://creativecommons.org/licenses/by-sa/3.0//

var assert = require('assert')

// Extend this for a good time
exports.negate = /^not$/i
exports.neutral = Object.create(null)
exports.phrases = Object.create(null)
exports.phrases_all
exports.words = new Map()

function createRe(str, trg, flags) {
  str = str.replace(/^\|+/, '').replace(/\|+$/, '')
  if (trg) str = [trg.source, str].join('|')
  return new RegExp(`${str}`, flags || 'gi')
}

function stripPunctuation(str) {
  return str.replace(/[^a-z0-9-]+/gi, '')
}

function addValenceSet(valences, sign) {
  for (var valence in valences) {
    var valenceSet = valences[valence]
    valence = sign * valence

    if (valenceSet.words) {
      valenceSet.words.split('|').forEach((w) => {
        if (!/\w+/.test(w)) return
          exports.words.set(stripPunctuation(w), valence)
      })
    }

    if (valenceSet.phrases) {
      exports.phrases[valence] =
        createRe(valenceSet.phrases, exports.phrases[valence])
      exports.phrases_all =
        createRe(valenceSet.phrases, exports.phrases_all, 'i')

    }
  }
}

function add(wordSet) {
  assert(typeof wordSet === 'object')

  if (wordSet.neutral && wordSet.neutral.phrases) {
    exports.neutral.phrases =
      createRe(wordSet.neutral.phrases, exports.neutral.phrases)
  }

  if (wordSet.negative) addValenceSet(wordSet.negative, -1)
  if (wordSet.positive) addValenceSet(wordSet.positive, +1)
}

exports.add = add

add(require('./afinn'))
add(require('./sentiwordnet_extremes'))
add(require('./sentiwordnet_neutral_phrases'))
